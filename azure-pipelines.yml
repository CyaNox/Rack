# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- combined-patches

jobs:
- job: Build
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-16.04'
        isLinux: true
        artifactMatrixID: 'Noxys_Rack_Linux'
      mac:
        imageName: 'macOS-10.14'
        isMac: true
        artifactMatrixID: 'Noxys_Rack_Mac'
#      windows:
#        imageName: 'windows-2019'
#        isWindows: true
#        artifactMatrixID: 'Noxys_Rack_Windows'

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    submodules: recursive

  - bash: |
      uname -a
      cat /proc/cpuinfo
      free -tm
      env
      gcc -dumpmachine
    displayName: 'System Info'
    condition: variables.isLinux

  - bash: |
      uname -a
      env
      gcc -dumpmachine
    displayName: 'System Info'
    condition: not(variables.isLinux)

  - script: |
      set
    displayName: 'System Info'
    condition: variables.isWindows

  - bash: |
      sudo apt install git gdb curl cmake libx11-dev libglu1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zlib1g-dev libasound2-dev libgtk2.0-dev libjack-jackd2-dev jq
    displayName: 'Installing Prerequisites > Linux'
    condition: variables.isLinux

  - bash: |
      brew install git wget cmake autoconf automake libtool jq python
    displayName: 'Installing Prerequisites > Mac'
    condition: variables.isMac

  - script: |
      choco install wget make unzip zip msys2-installer -y
      C:\msys64\usr\bin\bash.exe -l -c "pacman -Syu --ask=20"
      C:\msys64\usr\bin\bash.exe -l -c "pacman -Su git wget make tar unzip zip mingw-w64-x86_64-gcc mingw-w64-x86_64-gdb mingw-w64-x86_64-cmake autoconf automake mingw-w64-x86_64-libtool mingw-w64-x86_64-jq python"
    displayName: 'Installing Prerequisites > Windows'
    condition: variables.isWindows

  - bash: |
      export SYSTEM=`uname -s` # Tell openssl what system we are building on
      make dep
    displayName: 'Building Dependencies'
    condition: not(variables.isWindows)

  - script: |
      C:\msys64\usr\bin\bash.exe -l -c "make dep"
    displayName: 'Building Dependencies'
    condition: variables.isWindows

  - bash: |
      mv Makefile Makefile.pre
      sed -e 's/\.dev\./\.noxys\./g' Makefile.pre > Makefile # Make it clear this is not an official release
    displayName: 'Pre Building Rack'
    condition: variables.isMac

  - bash: |
      sed -i "s/\.dev\./\.noxys\./" Makefile # Make it clear this is not an official release
    displayName: 'Pre Building Rack'
    condition: not(variables.isMac)

  - script: |
      C:\msys64\usr\bin\bash.exe -l -c "make"
    displayName: 'Building Rack'
    condition: variables.isWindows

  - bash: |
      make
    displayName: 'Building Rack'
    condition: not(variables.isWindows)

  - script: |
      sed -i "s/\.dev\./\.noxys\./" Makefile # Make it clear this is not an official release
      c:\tools\msys64\msys2_shell.cmd -mingw64 make
    displayName: 'Building Rack'
    condition: variables.isWindows

  - bash: |
      cd plugins
      git clone https://github.com/VCVRack/Fundamental.git
      cd Fundamental
      git submodule update --init --recursive
      make dep
      make
      cd ../..
    displayName: 'Building Fundamental Plugins'

  - bash: |
      mv Makefile Makefile.pre
      sed -e 's/codesign/#codesign/g' Makefile.pre > Makefile
      rm Makefile.pre
      mv plugins/Fundamental/Makefile plugins/Fundamental/Makefile.pre
      sed -e 's/codesign/#codesign/g' plugins/Fundamental/Makefile.pre > plugins/Fundamental/Makefile
      rm plugins/Fundamental/Makefile.pre
      make dist
      rm -rf dist/Rack dist/Rack-SDK dist/Rack.app # We only care about the packed files
    displayName: 'Creating Distribution Package'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: $(artifactMatrixID)
      targetPath: 'dist/'
    displayName: Publish Artifact
