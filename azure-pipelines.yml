# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- combined-patches

jobs:
- job: Build
  strategy:
    matrix:
      linux:
        imageName: 'ubuntu-16.04'
        isLinux: true
        artifactMatrixID: 'Noxys_Rack_Linux'
      mac:
        imageName: 'macOS-10.14'
        isMac: true
        artifactMatrixID: 'Noxys_Rack_Mac'
      windows:
        imageName: 'vs2017-win2016'
        isWindows: true
        artifactMatrixID: 'Noxys_Rack_Windows'

  pool:
    vmImage: $(imageName)

  steps:
  - checkout: self
    submodules: recursive

  - bash: |
      uname -a
      cat /proc/cpuinfo
      free -tm
      env
      $CC -dumpmachine
    displayName: 'System Info'
    condition: variables.isLinux

  - bash: |
      uname -a
      env
      $CC -dumpmachine
    displayName: 'System Info'
    condition: not(variables.isLinux)
    env: 
      MSYSTEM: MINGW64

  - bash: |
      sudo apt install git gdb curl cmake libx11-dev libglu1-mesa-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zlib1g-dev libasound2-dev libgtk2.0-dev libjack-jackd2-dev jq
    displayName: 'Installing Prerequisites > Linux'
    condition: variables.isLinux

  - bash: |
      brew install git wget cmake autoconf automake libtool jq python
    displayName: 'Installing Prerequisites > Mac'
    condition: variables.isMac

  - bash: |
      # pacman -Syu
      # pacman -Su git wget make tar unzip zip mingw-w64-x86_64-gcc mingw-w64-x86_64-gdb mingw-w64-x86_64-cmake autoconf automake mingw-w64-x86_64-libtool mingw-w64-x86_64-jq python
      export CC=gcc
      export CPP=g++
    displayName: 'Installing Prerequisites > Windows'
    condition: variables.isWindows
    env: 
      MSYSTEM: MINGW64

  - bash: |
      export SYSTEM=`uname -s` # Tell openssl what system we are building on
      make dep
    displayName: 'Building Dependencies'
    env: 
      MSYSTEM: MINGW64

  - bash: |
      sed -i "s/\.dev\./\.noxys\./" Makefile # Make it clear this is not an official release
      make
    displayName: 'Building Rack'
    env: 
      MSYSTEM: MINGW64

  - bash: |
      cd plugins
      git clone https://github.com/VCVRack/Fundamental.git
      cd Fundamental
      git submodule update --init --recursive
      make dep
      make
      cd ../..
    displayName: 'Building Fundamental Plugins'
    env: 
      MSYSTEM: MINGW64

  - bash: |
      sed -i "s/codesign/#codesign/" Makefile # We don't have a certificate so just not sign it?
      make dist
      rm -rf dist/Rack dist/Rack-SDK dist/Rack.app # We only care about the packed files
    displayName: 'Creating Distribution Package'
    env: 
      MSYSTEM: MINGW64

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: $(artifactMatrixID)
      targetPath: 'dist/'
    displayName: Publish Artifact
